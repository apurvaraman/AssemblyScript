// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../binaryen
//   ../long

declare module 'assemblyscript' {
  /**
    * The exported AssemblyScript namespace.
    *
    * <h4>Sub-namespaces</h4>
    * <ul style="margin: 0; padding: 0; list-style: none">
    *   <li class="tsd-kind-module"><span class="tsd-kind-icon" /> {@link assemblyscript/binaryen|binaryen}</li>
    *   <li class="tsd-kind-module"><span class="tsd-kind-icon" /> {@link assemblyscript/builtins|builtins}</li>
    *   <li class="tsd-kind-module"><span class="tsd-kind-icon" /> {@link assemblyscript/expressions|expressions}</li>
    *   <li class="tsd-kind-module"><span class="tsd-kind-icon" /> {@link assemblyscript/library|library}</li>
    *   <li class="tsd-kind-module"><span class="tsd-kind-icon" /> {@link assemblyscript/reflection|reflection}</li>
    *   <li class="tsd-kind-module"><span class="tsd-kind-icon" /> {@link assemblyscript/statements|statements}</li>
    *   <li class="tsd-kind-module"><span class="tsd-kind-icon" /> {@link assemblyscript/typescript|typescript}</li>
    *   <li class="tsd-kind-module"><span class="tsd-kind-icon" /> {@link assemblyscript/wabt|wabt}</li>
    * </ul>
    *
    * @module assemblyscript
    * @preferred
    */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import * as builtins from "assemblyscript/builtins";
  import { Compiler, CompilerTarget, CompilerMemoryModel } from "assemblyscript/compiler";
  import * as expressions from "assemblyscript/expressions";
  import * as library from "assemblyscript/library";
  import Profiler from "assemblyscript/profiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  import * as statements from "assemblyscript/statements";
  import * as wabt from "assemblyscript/wabt";
  /** AssemblyScript version. */
  export const version: string;
  export { binaryen, builtins, Compiler, CompilerTarget, CompilerMemoryModel, expressions, library, Profiler, reflection, statements, typescript, wabt };
}

declare module 'assemblyscript/binaryen' {
  /**
    * A re-exporting wrapper around binaryen.js providing additional functionality.
    *
    * Note that the API documentation does not reference any re-exports because this isn't supported
    * by the documentation generator.
    *
    * For additional exports, see: https://github.com/dcodeIO/binaryen.js/blob/master/README.md#api
    *
    * @module assemblyscript/binaryen
    */ /** */
  import * as binaryen from "binaryen";
  import * as Long from "long";
  import * as reflection from "assemblyscript/reflection";
  export import none = binaryen.none;
  export import i32 = binaryen.i32;
  export import i64 = binaryen.i64;
  export import f32 = binaryen.f32;
  export import f64 = binaryen.f64;
  export import Type = binaryen.Type;
  export import Signature = binaryen.Signature;
  export import Function = binaryen.Function;
  export import Expression = binaryen.Expression;
  export import Statement = binaryen.Statement;
  export import MemorySegment = binaryen.MemorySegment;
  export import Module = binaryen.Module;
  export import I32Expression = binaryen.I32Expression;
  export import I64Expression = binaryen.I64Expression;
  export import F32Expression = binaryen.F32Expression;
  export import F64Expression = binaryen.F64Expression;
  export import I32Operations = binaryen.I32Operations;
  export import I64Operations = binaryen.I64Operations;
  export import F32Operations = binaryen.F32Operations;
  export import F64Operations = binaryen.F64Operations;
  export import readBinary = binaryen.readBinary;
  /** Computes a human readable signature identifier of a reflected type. */
  export function identifierOf(type: reflection.Type, uintptrSize: number): string;
  /** Computes the binaryen type of a reflected type. */
  export function typeOf(type: reflection.Type, uintptrSize: number): Type;
  /** Computes the binaryen opcode category (i32, i64, f32, f64) of a reflected type. */
  export function categoryOf(type: reflection.Type, module: Module, uintptrSize: number): I32Operations | I64Operations | F32Operations | F64Operations;
  /** Computes the constant value expression of the specified reflected type. */
  export function valueOf(type: reflection.Type, module: Module, value: number | Long): binaryen.I32Expression;
}

declare module 'assemblyscript/builtins' {
  /**
    * Compiler components dealing with built-in functions.
    *
    * Functions exported by this module correspond to the respective built-in functions. Each takes
    * TypeScript AST-objects and compiles them to opcodes directly.
    *
    * @module assemblyscript/builtins
    */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  import Compiler from "assemblyscript/compiler";
  /** Tests if the specified function name corresponds to a built-in function. */
  export function isBuiltin(name: string, isGlobalName?: boolean): boolean;
  /** A pair of TypeScript expressions. */
  export interface TypeScriptExpressionPair {
      0: typescript.Expression;
      1: typescript.Expression;
  }
  /** A pair of Binaryen expressions. */
  export interface BinaryenExpressionPair {
      0: binaryen.Expression;
      1: binaryen.Expression;
  }
  export function rotl(compiler: Compiler, node: TypeScriptExpressionPair, expr: BinaryenExpressionPair): binaryen.Expression;
  export function rotr(compiler: Compiler, node: TypeScriptExpressionPair, expr: BinaryenExpressionPair): binaryen.Expression;
  export function clz(compiler: Compiler, node: typescript.Expression, expr: binaryen.Expression): binaryen.Expression;
  export function ctz(compiler: Compiler, node: typescript.Expression, expr: binaryen.Expression): binaryen.Expression;
  export function popcnt(compiler: Compiler, node: typescript.Expression, expr: binaryen.Expression): binaryen.Expression;
  export function abs(compiler: Compiler, node: typescript.Expression, expr: binaryen.Expression): binaryen.Expression;
  export function ceil(compiler: Compiler, node: typescript.Expression, expr: binaryen.Expression): binaryen.Expression;
  export function floor(compiler: Compiler, node: typescript.Expression, expr: binaryen.Expression): binaryen.Expression;
  export function sqrt(compiler: Compiler, node: typescript.Expression, expr: binaryen.Expression): binaryen.Expression;
  export function trunc(compiler: Compiler, node: typescript.Expression, expr: binaryen.Expression): binaryen.Expression;
  export function nearest(compiler: Compiler, node: typescript.Expression, expr: binaryen.Expression): binaryen.Expression;
  export function min(compiler: Compiler, node: TypeScriptExpressionPair, expr: BinaryenExpressionPair): binaryen.Expression;
  export function max(compiler: Compiler, node: TypeScriptExpressionPair, expr: BinaryenExpressionPair): binaryen.Expression;
  export function copysign(compiler: Compiler, node: TypeScriptExpressionPair, expr: BinaryenExpressionPair): binaryen.Expression;
  export function reinterpret(compiler: Compiler, node: typescript.Expression, expr: binaryen.Expression): binaryen.Expression;
  export function current_memory(compiler: Compiler): binaryen.Expression;
  export function grow_memory(compiler: Compiler, node: typescript.Expression, expr: binaryen.Expression): binaryen.Expression;
  export function sizeof(compiler: Compiler, type: reflection.Type): binaryen.Expression;
  export function unsafe_cast(expr: binaryen.Expression): binaryen.Expression;
  export function isNaN(compiler: Compiler, node: typescript.Expression, expr: binaryen.Expression): binaryen.Expression;
  export function isFinite(compiler: Compiler, node: typescript.Expression, expr: binaryen.Expression): binaryen.Expression;
}

declare module 'assemblyscript/compiler' {
  import * as binaryen from "assemblyscript/binaryen";
  import Profiler from "assemblyscript/profiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  /** Compiler options. */
  export interface CompilerOptions {
      /** Whether compilation shall be performed in silent mode without writing to console. Defaults to `false`. */
      silent?: boolean;
      /** Whether to use built-in tree-shaking. Defaults to `true`. Disable this when building a dynamically linked library. */
      treeShaking?: boolean;
      /** Specifies the target architecture. Defaults to {@link CompilerTarget.WASM32}. */
      target?: CompilerTarget | "wasm32" | "wasm64";
      /** Specifies the memory model to use. Defaults to {@link CompilerMemoryModel.MALLOC}. */
      memoryModel?: CompilerMemoryModel | "malloc" | "exportmalloc" | "importmalloc" | "bare";
  }
  /** Compiler target. */
  export enum CompilerTarget {
      /** 32-bit WebAssembly target using uint pointers. */
      WASM32 = 0,
      /** 64-bit WebAssembly target using ulong pointers. */
      WASM64 = 1,
  }
  /** Compiler memory model. */
  export enum CompilerMemoryModel {
      /** Does not bundle any memory management routines. */
      BARE = 0,
      /** Bundles malloc, free, etc. */
      MALLOC = 1,
      /** Bundles malloc, free, etc. and exports it to the embedder. */
      EXPORT_MALLOC = 2,
      /** Imports malloc, free, etc. as provided by the embedder. */
      IMPORT_MALLOC = 3,
  }
  /** A static memory segment. */
  export interface CompilerMemorySegment {
      /** Offset in linear memory. */
      offset: number;
      /** Data in linear memory. */
      buffer: Uint8Array;
  }
  /**
    * The AssemblyScript compiler.
    *
    * Common usage is covered by the static methods {@link Compiler.compileFile} and {@link Compiler.compileString}
    * for convenience. Their diagnostics go to {@link Compiler.lastDiagnostics}.
    */
  export class Compiler {
      /** Diagnostic messages produced by the last invocation of {@link Compiler.compileFile} or {@link Compiler.compileString}. */
      static lastDiagnostics: typescript.Diagnostic[];
      options: CompilerOptions;
      program: typescript.Program;
      checker: typescript.TypeChecker;
      entryFile: typescript.SourceFile;
      libraryFile: typescript.SourceFile;
      diagnostics: typescript.DiagnosticCollection;
      module: binaryen.Module;
      signatures: {
          [key: string]: binaryen.Signature;
      };
      globalInitializers: binaryen.Expression[];
      userStartFunction?: binaryen.Function;
      memoryBase: number;
      memorySegments: CompilerMemorySegment[];
      target: CompilerTarget;
      memoryModel: CompilerMemoryModel;
      profiler: Profiler;
      currentFunction: reflection.Function;
      stringPool: {
          [key: string]: CompilerMemorySegment;
      };
      uintptrType: reflection.Type;
      functionTemplates: {
          [key: string]: reflection.FunctionTemplate;
      };
      classTemplates: {
          [key: string]: reflection.ClassTemplate;
      };
      globals: {
          [key: string]: reflection.Variable;
      };
      functions: {
          [key: string]: reflection.Function;
      };
      classes: {
          [key: string]: reflection.Class;
      };
      enums: {
          [key: string]: reflection.Enum;
      };
      startFunction: reflection.Function;
      pendingImplementations: {
          [key: string]: reflection.ClassTemplate;
      };
      /**
        * Compiles an AssemblyScript file to WebAssembly.
        * @param filename Entry file name
        * @param options Compiler options
        * @returns Compiled module or `null` if compilation failed. In case of failure, diagnostics are stored in {@link Compiler#diagnostics}.
        */
      static compileFile(filename: string, options?: CompilerOptions): binaryen.Module | null;
      /**
        * Compiles an AssemblyScript string to WebAssembly.
        * @param source Source string
        * @param options Compiler options
        * @param fileName File to use for the entry file
        * @returns Compiled module or `null` if compilation failed. In case of failure, diagnostics are stored in {@link Compiler#diagnostics}.
        */
      static compileString(source: string, options?: CompilerOptions, fileName?: string): binaryen.Module | null;
      /**
        * Compiles a TypeScript program using AssemblyScript syntax to WebAssembly.
        * @param program TypeScript program
        * @param options Compiler options
        * @returns Compiled module or `null` if compilation failed. In case of failure, diagnostics are stored in {@link Compiler#diagnostics}.
        */
      static compileProgram(program: typescript.Program, options?: CompilerOptions): binaryen.Module | null;
      /** Gets the configured byte size of a pointer. `4` when compiling for 32-bit WebAssembly, `8` when compiling for 64-bit WebAssembly. */
      readonly uintptrSize: number;
      /**
        * Constructs a new AssemblyScript compiler.
        * @param program TypeScript program
        * @param options Compiler options
        */
      constructor(program: typescript.Program, options?: CompilerOptions);
      /** Adds an informative diagnostic to {@link Compiler#diagnostics} and prints it. */
      info(node: typescript.Node, message: string, arg1?: string): void;
      /** Adds a warning diagnostic to {@link Compiler#diagnostics} and prints it. */
      warn(node: typescript.Node, message: string, arg1?: string): void;
      /** Adds an error diagnostic to {@link Compiler#diagnostics} and prints it. */
      error(node: typescript.Node, message: string, arg1?: string): void;
      /** Mangles a global name (of a function, a class, ...) for use with binaryen. */
      mangleGlobalName(name: string, sourceFile: typescript.SourceFile): string;
      /** Scans over the sources and initializes the reflection structure. */
      initialize(): void;
      /** Gets an existing signature if it exists and otherwise creates it. */
      getOrAddSignature(argumentTypes: reflection.Type[], returnType: reflection.Type): binaryen.Signature;
      /** Initializes the statically linked or imported malloc implementation. */
      initializeMalloc(): void;
      /** Initializes a global variable. */
      initializeGlobal(node: typescript.VariableStatement): void;
      /** Adds a global variable. */
      addGlobal(name: string, type: reflection.Type, mutable: boolean, initializerNode?: typescript.Expression): void;
      /** Creates or, if it already exists, looks up a static string and returns its offset in linear memory. */
      createStaticString(value: string): number;
      /** Initializes a function or class method. */
      initializeFunction(node: typescript.FunctionLikeDeclaration): {
          template: reflection.FunctionTemplate;
          instance?: reflection.Function;
      };
      /** Initializes a class. */
      initializeClass(node: typescript.ClassDeclaration): void;
      /** Initializes an enum. */
      initializeEnum(node: typescript.EnumDeclaration): void;
      /** Compiles the module and its components. */
      compile(): void;
      /** Compiles the start function if either a user-provided start function is or global initializes are present. */
      maybeCompileStartFunction(): void;
      /** Splits an import name possibly separated with a `$` character to a module name and a name. Defaults to `env` as the module name. */
      static splitImportName(name: string): {
          moduleName: string;
          name: string;
      };
      /** Compiles a function. */
      compileFunction(instance: reflection.Function): binaryen.Function | null;
      /** Compiles a class. */
      compileClass(instance: reflection.Class): void;
      /** Amends the current break context when entering a loop, switch or similar. */
      enterBreakContext(): string;
      /** Amends the current break context when leaving a loop, switch or similar. */
      leaveBreakContext(): void;
      /** Textual break label according to the current break context state. */
      readonly currentBreakLabel: string;
      /** Compiles a statement. */
      compileStatement(node: typescript.Statement): binaryen.Statement;
      /** Compiles an expression. */
      compileExpression(node: typescript.Expression, contextualType: reflection.Type): binaryen.Expression;
      /** Wraps an expression with a conversion where necessary. */
      maybeConvertValue(node: typescript.Expression, expr: binaryen.Expression, fromType: reflection.Type, toType: reflection.Type, explicit: boolean): binaryen.Expression;
      /** Resolves a TypeScript type alias to the root AssemblyScript type where applicable, by symbol. */
      maybeResolveAlias(symbol: typescript.Symbol): typescript.Symbol;
      /** Resolves a TypeScript type to a AssemblyScript type. */
      resolveType(type: typescript.TypeNode, acceptVoid?: boolean): reflection.Type;
      /** Resolves an identifier or name to the corresponding reflection object. */
      resolveReference(node: typescript.Identifier | typescript.EntityName, preferTemplate?: boolean): reflection.Variable | reflection.Enum | reflection.Class | reflection.ClassTemplate | null;
  }
  export { Compiler as default };
}

declare module 'assemblyscript/expressions' {
  /**
    * Compiler components dealing with TypeScript expressions.
    * @module assemblyscript/expressions
    * @preferred
    */ /** */
  export * from "assemblyscript/expressions/as";
  export * from "assemblyscript/expressions/binary";
  export * from "assemblyscript/expressions/call";
  export * from "assemblyscript/expressions/conditional";
  export * from "assemblyscript/expressions/elementaccess";
  export * from "assemblyscript/expressions/helpers/load";
  export * from "assemblyscript/expressions/helpers/store";
  export * from "assemblyscript/expressions/identifier";
  export * from "assemblyscript/expressions/literal";
  export * from "assemblyscript/expressions/new";
  export * from "assemblyscript/expressions/parenthesized";
  export * from "assemblyscript/expressions/postfixunary";
  export * from "assemblyscript/expressions/prefixunary";
  export * from "assemblyscript/expressions/propertyaccess";
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  /** Compiles an expression. */
  export function compile(compiler: Compiler, node: typescript.Expression, contextualType: reflection.Type): binaryen.Expression;
}

declare module 'assemblyscript/library' {
  /** AssemblyScript version. */
  export const version: string;
  /** Library sources for in-browser usage. */
  export const files: {
    [key: string]: string;
  };
  /** Precompiled malloc.wasm as a base64-encoded string. */
  export const malloc: string;
}

declare module 'assemblyscript/profiler' {
  /** A simple profiler used to measure compilation times. */
  export class Profiler {
      /** Cached labels. */
      labels: {
          [key: string]: number;
      };
      /**
        * Starts measuring using the specified label.
        * @param label Label
        */
      start(label: string): void;
      /**
        * Ends measuring using the specified label.
        * @param label Label
        * @returns High resolution time span in milliseconds
        */
      end(label: string): number;
  }
  export { Profiler as default };
}

declare module 'assemblyscript/reflection' {
  /**
    * Reflection components representing the actual WebAssembly output.
    * @module assemblyscript/reflection
    * @preferred
    */ /** */
  export * from "assemblyscript/reflection/class";
  export * from "assemblyscript/reflection/enum";
  export * from "assemblyscript/reflection/function";
  export * from "assemblyscript/reflection/property";
  export * from "assemblyscript/reflection/type";
  export * from "assemblyscript/reflection/variable";
}

declare module 'assemblyscript/typescript' {
  import * as reflection from "assemblyscript/reflection";
  import * as ts from "assemblyscript/--/lib/typescript/build";
  export import ArrayTypeNode = ts.ArrayTypeNode;
  export import AsExpression = ts.AsExpression;
  export import BinaryExpression = ts.BinaryExpression;
  export import Block = ts.Block;
  export import BreakStatement = ts.BreakStatement;
  export import CallExpression = ts.CallExpression;
  export import ClassDeclaration = ts.ClassDeclaration;
  import CompilerHost = ts.CompilerHost;
  export import ConditionalExpression = ts.ConditionalExpression;
  export import ConstructorDeclaration = ts.ConstructorDeclaration;
  export import ContinueStatement = ts.ContinueStatement;
  export import DiagnosticCategory = ts.DiagnosticCategory;
  export import DiagnosticCollection = ts.DiagnosticCollection;
  export import DiagnosticMessage = ts.DiagnosticMessage;
  export import Diagnostic = ts.Diagnostic;
  export import DoStatement = ts.DoStatement;
  export import ElementAccessExpression = ts.ElementAccessExpression;
  export import EnumDeclaration = ts.EnumDeclaration;
  export import EnumMember = ts.EnumMember;
  export import EntityName = ts.EntityName;
  export import ExpressionStatement = ts.ExpressionStatement;
  export import Expression = ts.Expression;
  import FormatDiagnosticsHost = ts.FormatDiagnosticsHost;
  export import ForStatement = ts.ForStatement;
  export import FunctionBody = ts.FunctionBody;
  export import FunctionLikeDeclaration = ts.FunctionLikeDeclaration;
  export import FunctionDeclaration = ts.FunctionDeclaration;
  export import Identifier = ts.Identifier;
  export import IfStatement = ts.IfStatement;
  export import LiteralExpression = ts.LiteralExpression;
  export import MethodDeclaration = ts.MethodDeclaration;
  export import NewExpression = ts.NewExpression;
  export import NodeArray = ts.NodeArray;
  export import NodeFlags = ts.NodeFlags;
  export import Node = ts.Node;
  export import ParameterDeclaration = ts.ParameterDeclaration;
  export import ParenthesizedExpression = ts.ParenthesizedExpression;
  export import PostfixUnaryExpression = ts.PostfixUnaryExpression;
  export import PrefixUnaryExpression = ts.PrefixUnaryExpression;
  export import Program = ts.Program;
  export import PropertyAccessExpression = ts.PropertyAccessExpression;
  export import PropertyDeclaration = ts.PropertyDeclaration;
  export import Signature = ts.Signature;
  export import TypeAliasDeclaration = ts.TypeAliasDeclaration;
  export import TypeChecker = ts.TypeChecker;
  export import TypeNode = ts.TypeNode;
  export import TypeParameterDeclaration = ts.TypeParameterDeclaration;
  export import TypeReferenceNode = ts.TypeReferenceNode;
  export import TypeReference = ts.TypeReference;
  export import Type = ts.Type;
  export import VariableDeclaration = ts.VariableDeclaration;
  export import VariableDeclarationList = ts.VariableDeclarationList;
  export import VariableStatement = ts.VariableStatement;
  export import ReturnStatement = ts.ReturnStatement;
  export import ScriptTarget = ts.ScriptTarget;
  export import SourceFile = ts.SourceFile;
  export import Statement = ts.Statement;
  export import SwitchStatement = ts.SwitchStatement;
  export import Symbol = ts.Symbol;
  export import SyntaxKind = ts.SyntaxKind;
  export import WhileStatement = ts.WhileStatement;
  export import getPreEmitDiagnostics = ts.getPreEmitDiagnostics;
  export import getSourceFileOfNode = ts.getSourceFileOfNode;
  export import getTextOfNode = ts.getTextOfNode;
  export import createDiagnosticCollection = ts.createDiagnosticCollection;
  export import createProgram = ts.createProgram;
  export import createSourceFile = ts.createSourceFile;
  /** Default format diagnostics host for convenience. */
  export const defaultFormatDiagnosticsHost: FormatDiagnosticsHost;
  /** Default compiler options for AssemblyScript compilation. */
  export const defaultCompilerOptions: ts.CompilerOptions;
  /** Creates an AssemblyScript-compatible compiler host. */
  export function createCompilerHost(moduleSearchLocations: string[], entryFileSource?: string, entryFileName?: string): CompilerHost;
  /** Creates a diagnostic message referencing a node. */
  export function createDiagnosticForNode(node: Node, category: DiagnosticCategory, message: string, arg1?: string): ts.Diagnostic;
  /** Formats a diagnostic message in plain text. */
  export function formatDiagnostics(diagnostics: Diagnostic[], host?: FormatDiagnosticsHost): string;
  /** Formats a diagnostic message with terminal colors and source context. */
  export function formatDiagnosticsWithColorAndContext(diagnostics: Diagnostic[], host?: FormatDiagnosticsHost): string;
  /** Prints a diagnostic message to console. */
  export function printDiagnostic(diagnostic: Diagnostic): void;
  /** Tests if the specified node has an 'export' modifier. */
  export function isExport(node: Node): boolean;
  /** Tests if the specified node has a 'declare' modifier. */
  export function isDeclare(node: Node): boolean;
  /** Tests if the specified node has a 'static' modifier or is otherwise part of a static context. */
  export function isStatic(node: Node): boolean;
  /** Tests if the specified node has an 'abstract' modifier. */
  export function isAbstract(node: Node): boolean;
  /** Tests if the specified node is flagged 'const'. */
  export function isConst(node: Node): boolean;
  /** Tests if a function fulfills the requirements to become a start function. */
  export function isStartFunction(node: FunctionLikeDeclaration): boolean;
  /** Gets the reflected type of an expression. */
  export function getReflectedType(node: Expression): reflection.Type;
  /** Sets the reflected type of an expression. */
  export function setReflectedType(node: Expression, type: reflection.Type): void;
  /** Gets the reflected function instance (describing a function with generic types resolved) of a function declaration. */
  export function getReflectedFunction(node: FunctionLikeDeclaration): reflection.Function;
  /** Sets the reflected function instance (describing a function with generic types resolved) of a function declaration. */
  export function setReflectedFunction(node: FunctionLikeDeclaration, instance: reflection.Function): void;
  /** Gets the reflected function template (describing a function with unresolved generic types) of a function declaration. */
  export function getReflectedFunctionTemplate(node: FunctionLikeDeclaration): reflection.FunctionTemplate;
  /** Sets the reflected function template (describing a function with unresolved generic types) of a function declaration. */
  export function setReflectedFunctionTemplate(node: FunctionLikeDeclaration, template: reflection.FunctionTemplate): void;
  /** Gets the reflected class instance (describing a class with generic types resolved) of a class declaration. */
  export function getReflectedClass(node: ClassDeclaration): reflection.Class;
  /** Sets the reflected class instance (describing a class with generic types resolved) of a class declaration. */
  export function setReflectedClass(node: ClassDeclaration, instance: reflection.Class): void;
  /** Gets the reflected class template (describing a class with unresolved generic types) of a class declaration. */
  export function getReflectedClassTemplate(node: ClassDeclaration): reflection.ClassTemplate;
  /** Sets the reflected class template (describing a class with unresolved generic types) of a class declaration. */
  export function setReflectedClassTemplate(node: ClassDeclaration, template: reflection.ClassTemplate): void;
}

declare module 'assemblyscript/statements' {
  /**
    * Compiler components dealing with TypeScript statements.
    * @module assemblyscript/statements
    * @preferred
    */ /** */
  export * from "assemblyscript/statements/block";
  export * from "assemblyscript/statements/break";
  export * from "assemblyscript/statements/do";
  export * from "assemblyscript/statements/empty";
  export * from "assemblyscript/statements/expression";
  export * from "assemblyscript/statements/for";
  export * from "assemblyscript/statements/if";
  export * from "assemblyscript/statements/return";
  export * from "assemblyscript/statements/switch";
  export * from "assemblyscript/statements/variable";
  export * from "assemblyscript/statements/while";
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as typescript from "assemblyscript/typescript";
  /** Compiles a statement. */
  export function compile(compiler: Compiler, node: typescript.Statement): binaryen.Statement;
}

declare module 'assemblyscript/wabt' {
  /** Indicates whether WABT-specific functionality is available. */
  export const available: boolean;
  /** A reusable error message in case wabt.js is not available. */
  export const ENOTAVAILABLE: string;
  /** Options for {@link wasmToWast}. */
  export interface IWasmToWastOptions {
    readDebugNames?: boolean;
    foldExprs?: boolean;
    inlineExport?: boolean;
    generateNames?: boolean;
  }
  /** Converts a WebAssembly binary to text format using stack syntax. */
  export function wasmToWast(buffer: Uint8Array, options?: IWasmToWastOptions): string;
  /** Options for {@link wastToWasm}. */
  export interface IWastToWasmOptions {
    filename?: string;
    canonicalizeLebs?: boolean;
    relocatable?: boolean;
    writeDebugNames?: boolean;
  }
  /** Converts WebAssembly text format using stack syntax to a binary. */
  export function wastToWasm(text: string, options?: IWastToWasmOptions): Uint8Array;
}

declare module 'assemblyscript/expressions/as' {
  /** @module assemblyscript/expressions */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  /** Compiles an 'as' expression converting from one type to another. */
  export function compileAs(compiler: Compiler, node: typescript.AsExpression, contextualType: reflection.Type): binaryen.Expression;
}

declare module 'assemblyscript/expressions/binary' {
  /** @module assemblyscript/expressions */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  /** Compiles a binary expression. Covers addition, multiplication and so on. */
  export function compileBinary(compiler: Compiler, node: typescript.BinaryExpression, contextualType: reflection.Type): binaryen.Expression;
  export function compileAssignment(compiler: Compiler, node: typescript.BinaryExpression, contextualType: reflection.Type): binaryen.Expression;
  export function compileAssignmentWithValue(compiler: Compiler, node: typescript.BinaryExpression, value: binaryen.Expression, contextualType: reflection.Type): binaryen.Expression;
}

declare module 'assemblyscript/expressions/call' {
  /** @module assemblyscript/expressions */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import { Compiler } from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  /** Compiles a function call expression. */
  export function compileCall(compiler: Compiler, node: typescript.CallExpression, contextualType: reflection.Type): binaryen.Expression;
}

declare module 'assemblyscript/expressions/conditional' {
  /** @module assemblyscript/expressions */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  export function compileConditional(compiler: Compiler, node: typescript.ConditionalExpression, contextualType: reflection.Type): binaryen.Expression;
}

declare module 'assemblyscript/expressions/elementaccess' {
  /** @module assemblyscript/expressions */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  export function compileElementAccess(compiler: Compiler, node: typescript.ElementAccessExpression, contextualType: reflection.Type): binaryen.Expression;
}

declare module 'assemblyscript/expressions/helpers/load' {
  /** @module assemblyscript/expressions */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  /** Helper compiling a load operation. */
  export function compileLoad(compiler: Compiler, node: typescript.Expression, type: reflection.Type, ptr: binaryen.Expression, offset: number): binaryen.Expression;
  export { compileLoad as default };
}

declare module 'assemblyscript/expressions/helpers/store' {
  /** @module assemblyscript/expressions */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  /** Helper compiling a store operation. */
  export function compileStore(compiler: Compiler, node: typescript.Expression, type: reflection.Type, ptr: binaryen.Expression, value: binaryen.Expression, offset: number): binaryen.Expression;
  export { compileStore as default };
}

declare module 'assemblyscript/expressions/identifier' {
  /** @module assemblyscript/expressions */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  export function compileIdentifier(compiler: Compiler, node: typescript.Identifier, contextualType: reflection.Type): binaryen.Expression;
}

declare module 'assemblyscript/expressions/literal' {
  /** @module assemblyscript/expressions */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  export function compileLiteral(compiler: Compiler, node: typescript.LiteralExpression, contextualType: reflection.Type, negate?: boolean): binaryen.Expression;
  export { compileLiteral as default };
}

declare module 'assemblyscript/expressions/new' {
  /** @module assemblyscript/expressions */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  export function compileNew(compiler: Compiler, node: typescript.NewExpression, contextualType: reflection.Type): binaryen.Expression;
  export function compileNewClass(compiler: Compiler, node: typescript.NewExpression, clazz: reflection.Class): binaryen.Expression;
  export function compileNewArray(compiler: Compiler, elementType: reflection.Type, sizeArgumentNode: typescript.Expression): binaryen.Statement;
}

declare module 'assemblyscript/expressions/parenthesized' {
  /** @module assemblyscript/expressions */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  export function compileParenthesized(compiler: Compiler, node: typescript.ParenthesizedExpression, contextualType: reflection.Type): binaryen.Expression;
}

declare module 'assemblyscript/expressions/postfixunary' {
  /** @module assemblyscript/expressions */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  export function compilePostfixUnary(compiler: Compiler, node: typescript.PostfixUnaryExpression, contextualType: reflection.Type): binaryen.Expression;
}

declare module 'assemblyscript/expressions/prefixunary' {
  /** @module assemblyscript/expressions */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  export function compilePrefixUnary(compiler: Compiler, node: typescript.PrefixUnaryExpression, contextualType: reflection.Type): binaryen.Expression;
}

declare module 'assemblyscript/expressions/propertyaccess' {
  /** @module assemblyscript/expressions */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as reflection from "assemblyscript/reflection";
  import * as typescript from "assemblyscript/typescript";
  export function compilePropertyAccess(compiler: Compiler, node: typescript.PropertyAccessExpression, contextualType: reflection.Type): binaryen.Expression;
}

declare module 'assemblyscript/reflection/class' {
  /** @module assemblyscript/reflection */ /** */
  import Compiler from "assemblyscript/compiler";
  import { FunctionTemplate, Function } from "assemblyscript/reflection/function";
  import Property from "assemblyscript/reflection/property";
  import Type from "assemblyscript/reflection/type";
  import * as typescript from "assemblyscript/typescript";
  /** Common base class of {@link Class} and {@link ClassTemplate}. */
  export abstract class ClassBase {
      /** Global name. */
      name: string;
      /** Declaration reference. */
      declaration: typescript.ClassDeclaration;
      protected constructor(name: string, declaration: typescript.ClassDeclaration);
      toString(): string;
  }
  /** Interface describing a reflected type argument. */
  export interface TypeArgument {
      /** Reflected type. */
      type: Type;
      /** TypeScript type node. */
      node: typescript.TypeNode;
  }
  export interface ClassMethod {
      template: FunctionTemplate;
      instance?: Function;
  }
  /** A class instance with generic parameters resolved. */
  export class Class extends ClassBase {
      /** Reflected class type. */
      type: Type;
      /** Concrete type arguments. */
      typeArguments: {
          [key: string]: TypeArgument;
      };
      /** Base class, if any. */
      base?: Class;
      /** Whether already initialized or not. */
      initialized: boolean;
      /** Static and instance class properties. */
      properties: {
          [key: string]: Property;
      };
      /** Static and instance class methods. */
      methods: {
          [key: string]: ClassMethod;
      };
      /** Class constructor, if any. */
      ctor?: Function;
      /** Size in memory, in bytes. */
      size: number;
      /** Whether array access is supported on this class. */
      isArray: boolean;
      isString: boolean;
      /** Constructs a new reflected class and binds it to its TypeScript declaration. */
      constructor(name: string, declaration: typescript.ClassDeclaration, uintptrType: Type, typeArguments: {
          [key: string]: TypeArgument;
      }, base?: Class);
      /** Initializes the class, its properties, methods and constructor. */
      initialize(compiler: Compiler): void;
      /** Initializes a single method. */
      initializeMethod(compiler: Compiler, node: typescript.MethodDeclaration): void;
  }
  export { Class as default };
  /** A class template with possibly unresolved generic parameters. */
  export class ClassTemplate extends ClassBase {
      /** Class instances by global name. */
      instances: {
          [key: string]: Class;
      };
      /** Base class template, if any. */
      base?: ClassTemplate;
      /** Base type arguments. */
      baseTypeArguments: typescript.TypeNode[];
      /** Constructs a new reflected class template and binds it to is TypeScript declaration. */
      constructor(name: string, declaration: typescript.ClassDeclaration, base?: ClassTemplate, baseTypeArguments?: typescript.TypeNode[]);
      /** Tests if this class requires type arguments. */
      readonly isGeneric: boolean;
      /** Resolves this possibly generic class against the provided type arguments. */
      resolve(compiler: Compiler, typeArgumentNodes: typescript.TypeNode[]): Class;
  }
  /** Patches a declaration to inherit from its actual implementation. */
  export function patchClassImplementation(compiler: Compiler, declTemplate: ClassTemplate, implTemplate: ClassTemplate): void;
}

declare module 'assemblyscript/reflection/enum' {
  /** @module assemblyscript/reflection */ /** */
  import Compiler from "assemblyscript/compiler";
  import Property from "assemblyscript/reflection/property";
  import * as typescript from "assemblyscript/typescript";
  /** A reflected enum instance. */
  export class Enum {
      /** Global name. */
      name: string;
      /** Declaration reference. */
      declaration: typescript.EnumDeclaration;
      /** Enum values. */
      values: {
          [key: string]: Property;
      };
      /** Constructs a new reflected enum and binds it to its TypeScript declaration. */
      constructor(name: string, declaration: typescript.EnumDeclaration);
      /** Initializes the enum and its values. */
      initialize(compiler: Compiler): void;
      toString(): string;
  }
  export { Enum as default };
}

declare module 'assemblyscript/reflection/function' {
  /** @module assemblyscript/reflection */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import { Class, TypeArgument } from "assemblyscript/reflection/class";
  import Compiler from "assemblyscript/compiler";
  import { Type } from "assemblyscript/reflection/type";
  import { Variable } from "assemblyscript/reflection/variable";
  import * as typescript from "assemblyscript/typescript";
  /** Common base class of {@link Function} and {@link FunctionTemplate}. */
  export abstract class FunctionBase {
      /** Global name. */
      name: string;
      /** Declaration reference. */
      declaration: typescript.FunctionLikeDeclaration;
      protected constructor(name: string, declaration: typescript.FunctionLikeDeclaration);
      /** Simple name. */
      readonly simpleName: string;
      /** Tests if this function is imported (just a declaration). */
      readonly isImport: boolean;
      /** Tests if this function is exported to the embedder. */
      readonly isExport: boolean;
      /** Tests if this function is an instance member / not static. */
      readonly isInstance: boolean;
      /** Tests if this function is the constructor of a class. */
      readonly isConstructor: boolean;
      toString(): string;
  }
  /** Interface describing a reflected function parameter. */
  export interface FunctionParameter {
      /** Simple name. */
      name: string;
      /** Resolved type. */
      type: Type;
      /** Parameter node reference. */
      node: typescript.Node;
      /** Whether this parameter also introduces a property (like when used with the `public` keyword). */
      isAlsoProperty?: boolean;
  }
  /** A function instance with generic parameters resolved. */
  export class Function extends FunctionBase {
      /** Resolved type arguments. */
      typeArguments: {
          [key: string]: TypeArgument;
      };
      /** Function parameters including `this`. */
      parameters: FunctionParameter[];
      /** Resolved return type. */
      returnType: Type;
      /** Parent class, if any. */
      parent?: Class;
      /** Body reference, if not just a declaration. */
      body?: typescript.Block | typescript.Expression;
      /** Local variables. */
      locals: Variable[];
      /** Local variables by name for lookups. */
      localsByName: {
          [key: string]: Variable;
      };
      /** Resolved binaryen parameter types. */
      binaryenParameterTypes: binaryen.Type[];
      /** Resolved binaryen return type. */
      binaryenReturnType: binaryen.Type;
      /** Binaryen signature id, for example "iiv". */
      binaryenSignatureId: string;
      /** Binaryen signature reference. */
      binaryenSignature: binaryen.Signature;
      /** Whether this function has already been compiled. */
      compiled: boolean;
      /** Whether this function has been imported. */
      imported: boolean;
      /** Number of the current break context. */
      breakNumber: number;
      /** Depth within the current break context. */
      breakDepth: number;
      /** Binaryen function reference. */
      binaryenFunction: binaryen.Function;
      /** Constructs a new reflected function instance and binds it to its TypeScript declaration. */
      constructor(name: string, declaration: typescript.FunctionLikeDeclaration, typeArguments: {
          [key: string]: TypeArgument;
      }, parameters: FunctionParameter[], returnType: Type, parent?: Class, body?: typescript.Block | typescript.Expression);
      /** Gets the current break label for use with binaryen loops and blocks. */
      readonly breakLabel: string;
      /** Initializes this function. Does not compile it, yet. */
      initialize(compiler: Compiler): void;
      /** Introduces an additional local variable. */
      addLocal(name: string, type: Type): Variable;
  }
  export { Function as default };
  /** A function template with possibly unresolved generic parameters. */
  export class FunctionTemplate extends FunctionBase {
      /** Declaration reference. */
      declaration: typescript.FunctionLikeDeclaration;
      /** So far resolved instances by global name. */
      instances: {
          [key: string]: Function;
      };
      /** Constructs a new reflected function template and binds it to its TypeScript declaration. */
      constructor(name: string, declaration: typescript.FunctionLikeDeclaration);
      /** Tests if this function requires type arguments. */
      readonly isGeneric: boolean;
      /** Resolves this possibly generic function against the provided type arguments. */
      resolve(compiler: Compiler, typeArgumentNodes: typescript.TypeNode[], parent?: Class): Function;
  }
}

declare module 'assemblyscript/reflection/property' {
  /** @module assemblyscript/reflection */ /** */
  import Type from "assemblyscript/reflection/type";
  import * as typescript from "assemblyscript/typescript";
  /** A reflected property. Also used to describe enum values. */
  export class Property {
      /** Global name. */
      name: string;
      /** Declaration reference. */
      declaration: typescript.PropertyDeclaration | typescript.EnumMember;
      /** Resolved type. */
      type: Type;
      /** Offset in memory, if applicable. */
      offset: number;
      /** Constant value, if applicable. */
      constantValue?: any;
      /** Constructs a new reflected property. */
      constructor(name: string, declaration: typescript.PropertyDeclaration | typescript.EnumMember, type: Type, offset: number, constantValue?: any);
      /** Tests if this property has a constant value. */
      readonly isConstant: boolean;
      /** Tests if this property is an instance member / not static. */
      readonly isInstance: boolean;
      toString(): string;
  }
  export { Property as default };
}

declare module 'assemblyscript/reflection/type' {
  /** @module assemblyscript/reflection */ /** */
  import Class from "assemblyscript/reflection/class";
  /** Core type kinds including range aliases. */
  export enum TypeKind {
      FirstInteger = 0,
      FirstUnsigned = 0,
      byte = 0,
      ushort = 1,
      uint = 2,
      ulong = 3,
      bool = 4,
      LastUnsigned = 5,
      uintptr = 5,
      FirstSigned = 6,
      sbyte = 6,
      short = 7,
      int = 8,
      LastSigned = 9,
      LastInteger = 9,
      long = 9,
      FirstFloat = 10,
      float = 10,
      LastFloat = 11,
      double = 11,
      void = 12,
  }
  /** A reflected type. */
  export class Type {
      /** Type kind. */
      kind: TypeKind;
      /** Size in linear memory. */
      size: number;
      /** Shift operand in conversions to 32-bit values. */
      shift32?: number;
      /** Mask used in conversions to 32-bit values. */
      mask32?: number;
      /** The underlying class, if a pointer. */
      underlyingClass?: Class;
      /** Constructs a new reflected type. Not meant to introduce any types other than the core types. */
      constructor(kind: TypeKind, size: number, underlyingClass?: Class);
      /** Tests if this is an integer type of any size. */
      readonly isAnyInteger: boolean;
      /** Tests if this is a float type of any size. */
      readonly isAnyFloat: boolean;
      /** Tests if this is a signed integer type of any size. */
      readonly isSigned: boolean;
      /** Tests if this is an 8-bit integer type of any signage. */
      readonly isByte: boolean;
      /** Tests if this is a 16-bit integer type of any signage. */
      readonly isShort: boolean;
      /** Tests if this is a 32-bit integer type of any signage. */
      readonly isInt: boolean;
      /** Tests if this is a 64-bit integer type of any signage. */
      readonly isLong: boolean;
      /** Tests if this is a pointer with an underlying class. */
      readonly isClass: boolean;
      /** Tests if this is a pointer with an underlying array-like class. */
      readonly isArray: boolean;
      /** Tests if this is a pointer with an underlying string-like class. */
      readonly isString: boolean;
      /** Gets the common name of a temporary variable of this type. */
      readonly tempName: string;
      /** Amends a pointer to reference the specified underlying class. */
      withUnderlyingClass(underlyingClass: Class): Type;
      toString(): string;
  }
  export { Type as default };
  /** Reflected signed 8-bit integer type. */
  export const sbyteType: Type;
  /** Reflected unsigned 8-bit integer type. */
  export const byteType: Type;
  /** Reflected signed 16-bit integer type. */
  export const shortType: Type;
  /** Reflected unsigned 16-bit integer type. */
  export const ushortType: Type;
  /** Reflected signed 32-bit integer type. */
  export const intType: Type;
  /** Reflected unsigned 32-bit integer type. */
  export const uintType: Type;
  /** Reflected signed 64-bit integer type. */
  export const longType: Type;
  /** Reflected unsigned 64-bit integer type. */
  export const ulongType: Type;
  /** Reflected bool type. */
  export const boolType: Type;
  /** Reflected 32-bit float type. */
  export const floatType: Type;
  /** Reflected 64-bit float type. */
  export const doubleType: Type;
  /** Reflected 32-bit pointer type. Relevant only when compiling for 32-bit WebAssembly. */
  export const uintptrType32: Type;
  /** Reflected 64-bit pointer type. Relevant only when compiling for 64-bit WebAssembly. */
  export const uintptrType64: Type;
  /** Reflected void type. */
  export const voidType: Type;
}

declare module 'assemblyscript/reflection/variable' {
  /** @module assemblyscript/reflection */ /** */
  import Type from "assemblyscript/reflection/type";
  /** Flags describing the kind of a variable. */
  export enum VariableFlags {
      none = 0,
      constant = 1,
      global = 2,
  }
  /** A reflected variable. */
  export class Variable {
      /** Simple or global name, depending on context. */
      name: string;
      /** Reflected type. */
      type: Type;
      /** Flags. */
      flags: VariableFlags;
      /** Local index, if applicable. */
      index: number;
      /** Constant value, if applicable. */
      value?: number | Long;
      /** Constructs a new reflected variable. */
      constructor(name: string, type: Type, flags: VariableFlags, index: number, value?: number | Long);
      /** Tests if this variable is declared constant. */
      readonly isConstant: boolean;
      /** Tests if this is a global variable. */
      readonly isGlobal: boolean;
      toString(): string;
  }
  export { Variable as default };
}

declare module 'assemblyscript/statements/block' {
  /** @module assemblyscript/statements */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as typescript from "assemblyscript/typescript";
  export function compileBlock(compiler: Compiler, node: typescript.Block): binaryen.Statement;
}

declare module 'assemblyscript/statements/break' {
  /** @module assemblyscript/statements */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as typescript from "assemblyscript/typescript";
  export function compileBreak(compiler: Compiler, node: typescript.BreakStatement | typescript.ContinueStatement): binaryen.Statement;
}

declare module 'assemblyscript/statements/do' {
  /** @module assemblyscript/statements */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as typescript from "assemblyscript/typescript";
  export function compileDo(compiler: Compiler, node: typescript.DoStatement): binaryen.Statement;
}

declare module 'assemblyscript/statements/empty' {
  /** @module assemblyscript/statements */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  export function compileEmpty(compiler: Compiler): binaryen.Statement;
}

declare module 'assemblyscript/statements/expression' {
  /** @module assemblyscript/statements */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as typescript from "assemblyscript/typescript";
  /** Compiles an expression statement. */
  export function compileExpression(compiler: Compiler, node: typescript.ExpressionStatement): binaryen.Statement;
}

declare module 'assemblyscript/statements/for' {
  /** @module assemblyscript/statements */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as typescript from "assemblyscript/typescript";
  export function compileFor(compiler: Compiler, node: typescript.ForStatement): binaryen.Statement;
}

declare module 'assemblyscript/statements/if' {
  /** @module assemblyscript/statements */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as typescript from "assemblyscript/typescript";
  export function compileIf(compiler: Compiler, node: typescript.IfStatement): binaryen.Statement;
}

declare module 'assemblyscript/statements/return' {
  /** @module assemblyscript/statements */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as typescript from "assemblyscript/typescript";
  export function compileReturn(compiler: Compiler, node: typescript.ReturnStatement): binaryen.Statement;
}

declare module 'assemblyscript/statements/switch' {
  /** @module assemblyscript/statements */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as typescript from "assemblyscript/typescript";
  export function compileSwitch(compiler: Compiler, node: typescript.SwitchStatement): binaryen.Statement;
}

declare module 'assemblyscript/statements/variable' {
  /** @module assemblyscript/statements */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import { Compiler } from "assemblyscript/compiler";
  import * as typescript from "assemblyscript/typescript";
  export function compileVariable(compiler: Compiler, node: typescript.VariableStatement): binaryen.Statement;
  export function compileVariableDeclarationList(compiler: Compiler, node: typescript.VariableDeclarationList): binaryen.Statement;
}

declare module 'assemblyscript/statements/while' {
  /** @module assemblyscript/statements */ /** */
  import * as binaryen from "assemblyscript/binaryen";
  import Compiler from "assemblyscript/compiler";
  import * as typescript from "assemblyscript/typescript";
  export function compileWhile(compiler: Compiler, node: typescript.WhileStatement): binaryen.Statement;
}

